
@model NewsSite.WebUi.ViewModel.PostSummaryViewModel
@using NewsSite.Domain.Entities;
@using NewsSite.WebUi.HtmlHelpers;
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Identity
@inject IViewLocalizer Localizer
@inject UserManager<User> UserManager


@{
    string userId = UserManager.GetUserId(User);
}

<div class="card mb-4">
    <div class="fill-logo">
        <img src="@Url.Content(Model.Post.Path)">
        <div class="card-body">
            <h2 class="card-title">@Model.Post.Title</h2>

            <p class="card-text">@Model.Post.Description</p>
            <p>
                @foreach (var item in @Model.Post.PostTags.Select(e => e.Tag))
                {
                    <div class="badge badge-dark">
                        @item.Name.ToUpper()
                    </div>
                }
            </p>
            <a asp-controller="Post" asp-action="ShowPost" asp-route-Id="@Model.Post.PostId" class="btn btn-primary"> @Localizer["Read More"] &rarr; </a>

        </div>
        <div class="card-footer text-muted">
            @Localizer["Posted on"] @Model.Post.DateChanged.ToString("f")
            <div class="float-right">
                <select id="rating-@Model.Post.PostId">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>
            </div>
        </div>
    </div>
</div>



<script type="text/javascript">

    $(function () {

        var idRating = '#rating-@Model.Post.PostId';

        $(idRating).barrating({

            theme: 'bars-reversed',
            onSelect: function (value, text, event) {
                if (typeof (event) !== 'undefined') {
                    $.post("/Post/SetRating", { id: parseInt(@Model.Post.PostId), value: value }, function (data) {
                        $(idRating).barrating('readonly', true);
                        $(idRating).barrating('set', data);
                    });
                }
            },
            readonly: true,
            initialRating: @Model.Post.ValueRating,
        });

        @if (User.Identity.IsAuthenticated & Model.Ratings.Where(r=>r.UserId==userId).Count() == 0)
        {
            @:$(idRating).barrating('readonly', false);
        }
        });
</script>

